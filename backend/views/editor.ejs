<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title><% if (page) { %>Edit â€” Share Me<% } else { %>Share Me<% } %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/css/style.css">
  <%- include('layouts/header') %>
</head>
<body>
  <button id="btnPublish" class="publish-btn">PUBLISH</button>
  
  <% if (locals.user) { %>
  <a href="/dashboard" class="edit-btn">DASHBOARD</a>
  <% } %>
  
  <div class="container">
    <div class="editor-main">
      <div class="content-area">
        <div class="input-wrapper">
          <div class="placeholder-text title-placeholder">Title</div>
          <textarea id="title" class="title-input" rows="1" oninput="this.style.height = ''; this.style.height = Math.max(32, this.scrollHeight) + 'px'"><% if (page) { %><%= page.title %><% } %></textarea>
        </div>
        
        <div class="input-wrapper" id="authorWrapper">
          <div class="placeholder-text name-placeholder">Your name</div>
          <input id="author" class="author-input" value="" />
        </div>
        
        <div class="input-wrapper story-wrapper" id="storyWrapper">
          <div class="placeholder-text story-placeholder">Your story...</div>
          <div id="editor" class="editor" contenteditable="true"><%- page && page.content ? page.content : '' %></div>
          <div id="imageToolbar" class="editor-toolbar">
            <label for="imageUpload" class="image-upload-btn" title="Insert image">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3ZM19 19H5V5H19V19ZM14.14 11.86L11.14 15.73L9 13.14L6 17H18L14.14 11.86Z" fill="currentColor"/>
              </svg>
            </label>
            <input type="file" id="imageUpload" accept="image/*" style="display:none">
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Set up initial variables
    var pageSlug = <% if (page && page.slug) { %>'<%= page.slug %>'<% } else { %>null<% } %>;
    var pageToken = <% if (typeof token !== 'undefined') { %>'<%= token %>'<% } else { %>null<% } %>;
    var userId = <% if (locals.user && locals.user.telegramId) { %>'<%= locals.user.telegramId %>'<% } else { %>null<% } %>;
    var userName = <% if (locals.user && locals.user.name) { %>'<%= locals.user.name %>'<% } else { %>null<% } %>;
    var pageAuthor = <% if (page && page.author) { %>'<%= page.author %>'<% } else { %>null<% } %>;
    var authorParam = <% if (typeof author !== 'undefined') { %>'<%= author %>'<% } else { %>null<% } %>;
    
    // Expose to window for other scripts
    window.__slug = pageSlug;
    window.__token = pageToken;
    window.__userId = userId;
    
    // Set up author field
    var authorInput = document.getElementById('author');
    var authorWrapper = document.getElementById('authorWrapper');
    
    // Determine author value
    if (pageAuthor) {
      authorInput.value = pageAuthor;
      authorWrapper.classList.add('has-text');
    } else if (userName) {
      authorInput.value = userName;
      authorWrapper.classList.add('has-text');
    } else if (authorParam) {
      authorInput.value = authorParam;
      authorWrapper.classList.add('has-text');
    } else if (localStorage.getItem('author')) {
      authorInput.value = localStorage.getItem('author');
      authorWrapper.classList.add('has-text');
    }
    
    // Auto-resize title textarea
    const titleInput = document.getElementById('title');
    titleInput.style.height = Math.max(32, titleInput.scrollHeight) + 'px';
    
    // Check if title has text and update class accordingly
    const titleWrapper = titleInput.closest('.input-wrapper');
    if (titleInput.value.trim()) {
      titleWrapper.classList.add('has-text');
    } else {
      titleWrapper.classList.remove('has-text');
    }
    
    // Handle editor content and placeholder
    const editor = document.getElementById('editor');
    const storyWrapper = document.getElementById('storyWrapper');
    const imageToolbar = document.getElementById('imageToolbar');
    
    // Check if editor has content
    function checkEditorContent() {
      if (editor.innerHTML.trim() && editor.innerHTML !== '<br>') {
        storyWrapper.classList.add('has-text');
      } else {
        storyWrapper.classList.remove('has-text');
      }
    }
    
    // Initial check
    checkEditorContent();
    
    // Function to check if current line is empty and show/hide image toolbar
    function checkCurrentLine() {
      const selection = window.getSelection();
      if (!selection.rangeCount) return;
      
      const range = selection.getRangeAt(0);
      const node = range.startContainer;
      
      // Get the current line element (paragraph or div)
      let currentLine = node;
      if (node.nodeType === 3) { // Text node
        currentLine = node.parentNode;
      }
      
      // Check if we're in the editor
      if (!editor.contains(currentLine)) {
        imageToolbar.classList.remove('visible');
        return;
      }
      
      // Check if the line is empty or only contains a <br>
      const isEmpty = !currentLine.textContent.trim() || 
                     (currentLine.innerHTML === '<br>' || currentLine.innerHTML === '');
      
      if (isEmpty) {
        // Position the toolbar at the cursor
        const rect = range.getBoundingClientRect();
        const editorRect = editor.getBoundingClientRect();
        
        // Position the toolbar inline with the text cursor
        imageToolbar.style.position = 'absolute';
        imageToolbar.style.top = (rect.top - editorRect.top) + 'px';
        imageToolbar.style.left = (rect.left - editorRect.left + 20) + 'px'; // Add offset to position after cursor
        imageToolbar.classList.add('visible');
      } else {
        imageToolbar.classList.remove('visible');
      }
    }
    
    // Add event listeners for editor
    editor.addEventListener('input', () => {
      checkEditorContent();
      checkCurrentLine();
    });
    
    editor.addEventListener('keyup', checkCurrentLine);
    editor.addEventListener('click', checkCurrentLine);
    
    editor.addEventListener('focus', () => {
      storyWrapper.classList.add('focused');
      checkCurrentLine();
    });
    
    editor.addEventListener('blur', (e) => {
      // Don't hide toolbar if clicking on the toolbar itself
      if (e.relatedTarget && imageToolbar.contains(e.relatedTarget)) {
        return;
      }
      storyWrapper.classList.remove('focused');
      // Add a small delay before hiding to allow for toolbar clicks
      setTimeout(() => {
        if (!editor.contains(document.activeElement)) {
          imageToolbar.classList.remove('visible');
        }
      }, 100);
    });
    
    // Make images selectable and deletable like text
    editor.addEventListener('mousedown', function(e) {
      if (e.target.tagName === 'IMG') {
        // Make the image selected
        const selection = window.getSelection();
        const range = document.createRange();
        range.selectNode(e.target);
        selection.removeAllRanges();
        selection.addRange(range);
        e.preventDefault(); // Prevent default behavior
      }
    });
    
    // Handle placeholders for input fields
    document.querySelectorAll('.input-wrapper:not(.story-wrapper)').forEach(wrapper => {
      const input = wrapper.querySelector('input, textarea');
      
      // Initial state
      if (input.value.trim()) {
        wrapper.classList.add('has-text');
      } else {
        wrapper.classList.remove('has-text');
      }
      
      // Event listeners
      input.addEventListener('input', () => {
        if (input.value.trim()) {
          wrapper.classList.add('has-text');
        } else {
          wrapper.classList.remove('has-text');
        }
      });
      
      input.addEventListener('focus', () => {
        wrapper.classList.add('focused');
      });
      
      input.addEventListener('blur', () => {
        wrapper.classList.remove('focused');
      });
    });
    
    // Save author to localStorage when changed
    document.getElementById('author').addEventListener('input', function() {
      localStorage.setItem('author', this.value);
    });
    
    // Image upload handling
    document.getElementById('imageUpload').addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file && file.type.match('image.*')) {
        const reader = new FileReader();
        
        reader.onload = function(event) {
          const img = document.createElement('img');
          img.src = event.target.result;
          img.className = 'editor-image';
          
          // Wait for image to load to calculate dimensions
          img.onload = function() {
            // Insert image at cursor position
            const selection = window.getSelection();
            if (selection.rangeCount > 0) {
              const range = selection.getRangeAt(0);
              range.deleteContents();
              range.insertNode(img);
              
              // Insert a new paragraph after the image
              const paragraph = document.createElement('p');
              paragraph.innerHTML = '<br>';
              
              if (img.nextSibling) {
                editor.insertBefore(paragraph, img.nextSibling);
              } else {
                editor.appendChild(paragraph);
              }
              
              // Move cursor after image to the new paragraph
              range.setStartAfter(paragraph);
              range.setEndAfter(paragraph);
              selection.removeAllRanges();
              selection.addRange(range);
              
              // Hide toolbar and trigger content check
              imageToolbar.classList.remove('visible');
              checkEditorContent();
            } else {
              editor.appendChild(img);
              checkEditorContent();
            }
          };
        };
        
        reader.readAsDataURL(file);
      }
      
      // Reset file input
      this.value = '';
    });
    
    // Initial setup for image toolbar positioning
    setTimeout(checkCurrentLine, 500);
    
    // Add support for paragraph creation on Enter key
    editor.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        // Let the browser handle the Enter key normally
        // but check for empty lines on the next tick
        setTimeout(checkCurrentLine, 0);
      }
    });
  </script>
  <script type="module" src="/js/editor.js"></script>
</body>
</html> 